Index: public/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- public/index.html	(date 1558075849000)
+++ public/index.html	(date 1558511878000)
@@ -9,7 +9,7 @@
       manifest.json provides metadata used when your web app is added to the
       homescreen on Android. See https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/
     -->
-  <script src='https://cdn.rawgit.com/simonbengtsson/jsPDF/requirejs-fix-dist/dist/jspdf.debug.js'></script>
+  <script crossorigin src='https://cdn.rawgit.com/simonbengtsson/jsPDF/requirejs-fix-dist/dist/jspdf.debug.js'></script>
   <script src='https://unpkg.com/jspdf-autotable@2.3.2'></script>
   <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
   <link rel="shortcut icon" href="%PUBLIC_URL%/lanetlogo.ico" />
@@ -39,4 +39,4 @@
     -->
 </body>
 
-</html>
\ No newline at end of file
+</html>
Index: src/Action/queAction.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Action/queAction.js	(date 1558075849000)
+++ src/Action/queAction.js	(date 1558511878000)
@@ -42,7 +42,6 @@
             })
             .catch((error) => {
                 if (error) {
-                    
                     dispatch({
                         type: GET_ALL_QUESTION_FAILED,
                         error: "Invalid data"
@@ -50,4 +49,4 @@
                 }
             })
     }
-}
\ No newline at end of file
+}
Index: src/Action/techAction.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Action/techAction.js	(date 1558075849000)
+++ src/Action/techAction.js	(date 1558511878000)
@@ -1,11 +1,14 @@
+import { ADD_TECHNOLOGY, DELETE_SUBTECHNOLOGY, DELETE_TECHNOLOGY, EDIT_TECHNOLOGY, GET_SUBTECHNOLOGY, GET_TECHNOLOGY, INVALID_DATA } from '../Reducer/techReducer';
 import * as techService from '../Services/techService';
-import { ADD_TECHNOLOGY, GET_SUBTECHNOLOGY, GET_TECHNOLOGY, INVALID_DATA } from '../Reducer/techReducer';
+
 
 export const GetTechnologyAction = () => {
+
     return (dispatch) => {
         return techService.GetTechnology()
             .then((response) => {
                 if (response.status === 200) {
+
                     dispatch({
                         type: GET_TECHNOLOGY,
                         data: response.data
@@ -14,6 +17,7 @@
             })
             .catch((error) => {
                 if (error) {
+                    // debugger;
                     dispatch({
                         type: INVALID_DATA,
                         error: "Invalid data"
@@ -47,6 +51,7 @@
 }
 
 export const AddTechnologyAction = (data) => {
+    // debugger;
     return (dispatch) => {
         return techService.AddTechnology(data)
             .then((response) => {
@@ -60,6 +65,79 @@
             })
             .catch((error) => {
                 if (error) {
+                    // debugger;
+                    dispatch({
+                        type: INVALID_DATA,
+                        error: "Invalid data"
+                    });
+                }
+            })
+    }
+}
+export const EditTechnologyAction = (id,data) => {
+    // debugger;
+    return (dispatch) => {
+        return techService.EditTechnology(id,data)
+            .then((response) => {
+                if (response.status === 200) {
+
+                    dispatch({
+                        type: EDIT_TECHNOLOGY,
+                        data: response.data
+                    })
+                }
+            })
+            .catch((error) => {
+                if (error) {
+                    // debugger;
+                    dispatch({
+                        type: INVALID_DATA,
+                        error: "Invalid data"
+                    });
+                }
+            })
+    }
+}
+export const DeleteTechnologyAction = (id) => {
+    // debugger;
+    return (dispatch) => {
+        return techService.DeleteTechnology(id)
+            .then((response) => {
+                if (response.status === 200) {
+
+                    dispatch({
+                        type: DELETE_TECHNOLOGY,
+                        data: response.data
+                    })
+                }
+            })
+            .catch((error) => {
+                if (error) {
+                    // debugger;
+                    dispatch({
+                        type: INVALID_DATA,
+                        error: "Invalid data"
+                    });
+                }
+            })
+    }
+}
+
+export const DeleteSubtechnologyAction = (id) => {
+    return (dispatch) => {
+        return techService.DeleteSubtechnology(id)
+            .then((response) => {
+                if (response.status === 200) {
+
+                    dispatch({
+                        type: DELETE_SUBTECHNOLOGY,
+                        data: response.data
+                    })
+                }
+            })
+            .catch((error) => {
+                if (error) {
+                    // debugger;
                     dispatch({
                         type: INVALID_DATA,
                         error: "Invalid data"
@@ -67,4 +145,4 @@
                 }
             })
     }
-}
\ No newline at end of file
+}
Index: src/Action/testAction.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Action/testAction.js	(date 1558075849000)
+++ src/Action/testAction.js	(date 1558511878000)
@@ -85,4 +85,4 @@
             }
         })
     }
-};
\ No newline at end of file
+};
Index: src/Action/testQuestionAction.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Action/testQuestionAction.js	(date 1558075849000)
+++ src/Action/testQuestionAction.js	(date 1558511878000)
@@ -1,5 +1,5 @@
 import * as testQuestionService from '../Services/testQuestionService';
-import { GET_TEST_QUESTION, GET_TEST_QUESTION_FAILED } from '../Reducer/testQuestionReducer';
+import { GET_TEST_QUESTION, GET_TEST_QUESTION_FAILED,UPDATE_QUESTION,UPDATE_QUESTION_FAILED } from '../Reducer/testQuestionReducer';
 
 export const getTestQuestion = (testId) => {
     return dispatch => {
@@ -20,7 +20,7 @@
             .catch((error) => {
                 dispatch({
                     type: GET_TEST_QUESTION_FAILED,
-                    test_question_error: error.response.data.error
+                    test_question_error: error.response && error.response.data.error
                 })
             })
     }
@@ -31,10 +31,8 @@
         testQuestionService.shuffleQuestion(testId, testQuesId)
             .then((response) => {
                 if (response.status === 200) {
-                    let quesId;
                     if (response.data.quesId) {
-                        quesId = JSON.parse(response.data.quesId);
-                        response.data.quesId = quesId;
+                        response.data.quesId =  JSON.parse(response.data.quesId);
                     }
                     dispatch({
                         type: GET_TEST_QUESTION,
@@ -49,4 +47,24 @@
                 })
             })
     }
+}
+
+export const updateQuestion = (testId, testQuesId,quesId) => {
+    return dispatch => {
+        testQuestionService.updateQuestion(testId, testQuesId,quesId)
+            .then((response) => {
+                if (response.status === 200) {
+                    dispatch({
+                        type: UPDATE_QUESTION,
+                        test_question: response.data
+                    })
+                }
+            })
+            .catch((error) => {
+                dispatch({
+                    type: UPDATE_QUESTION_FAILED,
+                    test_question_error: error.response.data.error
+                })
+            })
+    }
 }
\ No newline at end of file
Index: src/Action/userAction.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Action/userAction.js	(date 1558075849000)
+++ src/Action/userAction.js	(date 1558511878000)
@@ -1,5 +1,5 @@
 import * as userService from '../Services/userService';
-import { GET_USER, GET_USER_FAILED, DELETE_USER, DELETE_USER_FAILED } from '../Reducer/userReducer';
+import { GET_USER, GET_USER_FAILED, DELETE_USER, DELETE_USER_FAILED, SEARCH, SEARCH_FAILED } from '../Reducer/userReducer';
 
 export const getUser = (pageNo, recordPerPage, fieldName, sortDirection) => {
     return dispatch => {
@@ -63,4 +63,25 @@
             }
         })
     }
-};
\ No newline at end of file
+};
+
+export const search = (searchTerm) => {
+    debugger
+    return dispatch => {
+        userService.search(searchTerm)
+            .then((response) => {
+                if (response.status === 200) {
+                    dispatch({
+                        type: SEARCH,
+                        searchResponse: response.data
+                    })
+                }
+            })
+            .catch((error) => {
+                dispatch({
+                    type: SEARCH_FAILED,
+                    searchError: error.response.data.error
+                })
+            })
+    }
+}
\ No newline at end of file
Index: src/Admin/TechnologyQuestion/AddQuestions.js
===================================================================
--- src/Admin/TechnologyQuestion/AddQuestions.js	(date 1558511878000)
+++ src/Admin/TechnologyQuestion/AddQuestions.js	(date 1558511878000)
@@ -0,0 +1,426 @@
+import React, { Component } from 'react'
+import classnames from 'classnames';
+import { ExcelRenderer } from 'react-excel-renderer';
+import Select from 'react-select';
+import { Badge, Button, Card, CardBody, CardHeader, Col, Container, Form, FormGroup, Input, Nav, NavItem, NavLink, Row, TabContent, Table, TabPane } from "reactstrap";
+import CustomeSwitch from '../../components/CustomeSwitch/CustomeSwitch'
+import RichTextBox from '../../components/RichTextEditor/richtext'
+import * as techAction from '../../Action/techAction'
+import { bindActionCreators } from 'redux';
+import { connect } from 'react-redux'
+import * as queAction from '../../Action/queAction'
+import { glob_que, opt_a, opt_b, opt_c, opt_d } from '../../components/RichTextEditor/richtext'
+
+class AddQuestions extends Component {
+    constructor(props) {
+        super(props);
+        this.state = {
+            activeTab: '1',
+            cols: [],
+            rows: [],
+            checked_a: false,
+            checked_b: false,
+            checked_c: false,
+            checked_d: false,
+            selectedtech: null,
+            selectedsubtech: null,
+            ismcq: true,
+        };
+
+        this.QuestionToggle = this.QuestionToggle.bind(this);
+    }
+    componentDidMount() {
+        this.props.techaction.GetTechnologyAction().then((res) => {
+            // document.getElementById("selectsubtech").hidden = true;
+            // document.getElementById("fselectsubtech").hidden = true;
+        })
+        document.getElementById("selectsubtech").hidden = true;
+        document.getElementById("fselectsubtech").hidden = true;
+    }
+    QuestionToggle(tab) {
+        if (this.state.activeTab !== tab) {
+            this.setState({
+                activeTab: tab
+            });
+        }
+    }
+    SelectTechHandleChange = (selectedOption) => {
+        document.getElementById("selectsubtech").hidden = true;
+        document.getElementById("fselectsubtech").hidden = true;
+        let techId = selectedOption.value
+        this.props.technology.map((t) => {
+            if (t.techId === JSON.parse(techId)) {
+                if (t.level === 1) {
+                    this.props.techaction.GetSubtechnologyAction(techId)
+                    document.getElementById("selectsubtech").hidden = false;
+                    document.getElementById("fselectsubtech").hidden = false;
+                }
+            }
+            return true
+        })
+        this.setState({ selectedtech: selectedOption, selectedsubtech: null });
+    }
+    SelectSubtechHandleChange = (selectedOption) => {
+        // debugger;
+        this.setState({ selectedsubtech: selectedOption });
+    }
+    fileHandler = (event) => {
+        let fileObj = event.target.files[0];
+        ExcelRenderer(fileObj, (err, resp) => {
+            if (err) {
+                console.log(err);
+            }
+            else {
+                this.setState({
+                    cols: resp.cols,
+                    rows: resp.rows
+                });
+            }
+        });
+    }
+    mcqClick() {
+        document.getElementById("mcq").hidden = false;
+        document.getElementById("fillup").hidden = true;
+        this.setState({ ismcq: true });
+    }
+    fillUpClick() {
+        document.getElementById("mcq").hidden = true;
+        document.getElementById("fillup").hidden = false;
+        this.setState({ ismcq: false });
+    }
+    questionEditor() {
+
+    }
+    EditToggle_a = (e) => {
+        this.setState({ checked_a: !this.state.checked_a });
+    }
+    EditToggle_b = (e) => {
+        this.setState({ checked_b: !this.state.checked_b });
+    }
+    EditToggle_c = (e) => {
+        this.setState({ checked_c: !this.state.checked_c });
+    }
+    EditToggle_d = (e) => {
+        this.setState({ checked_d: !this.state.checked_d });
+    }
+    addQuestion = () => {
+        var a, b, c, d;
+        const techid = (this.state.selectedtech !== null) ? this.state.selectedtech.value : 0;
+        const subtechid = (this.state.selectedsubtech !== null) ? this.state.selectedsubtech.value : null;
+        let obj
+        if (this.state.ismcq) {
+            if (this.state.checked_a) {
+                a = { text: opt_a };
+            }
+            else {
+                let aa = document.getElementById("op_a").value
+                a = { text: aa }
+            }
+            if (this.state.checked_b) {
+                b = { text: opt_b };
+            }
+            else {
+                let bb = document.getElementById("op_b").value
+                b = { text: bb }
+            }
+            if (this.state.checked_c) {
+                c = { text: opt_c };
+            }
+            else {
+                let cc = document.getElementById("op_c").value
+                c = { text: cc }
+            }
+            if (this.state.checked_d) {
+                d = { text: opt_d };
+            }
+            else {
+                let dd = document.getElementById("op_d").value
+                d = { text: dd }
+            }
+            let ans = ''
+            if (document.getElementById("radio1").checked) {
+                ans = a
+            }
+            else if (document.getElementById("radio2").checked) {
+                ans = b
+            }
+            else if (document.getElementById("radio3").checked) {
+                ans = c
+            }
+            else if (document.getElementById("radio4").checked) {
+                ans = d
+            }
+            obj = {
+                techId: parseInt(techid),
+                subTechId: parseInt(subtechid),
+                question: JSON.stringify({ text: glob_que }),
+                a: JSON.stringify(a),
+                b: JSON.stringify(b),
+                c: JSON.stringify(c),
+                d: JSON.stringify(d),
+                answer: JSON.stringify(ans)
+            }
+        }
+        else {
+            let ans = document.getElementById("fillup").value
+            obj = {
+                techId: parseInt(techid),
+                subTechId: parseInt(subtechid),
+                question: JSON.stringify({ text: glob_que }),
+                a: null,
+                b: null,
+                c: null,
+                d: null,
+                answer: JSON.stringify({ text: ans })
+            }
+        }
+        let qobj = {
+            questions: [obj]
+        }
+        this.props.queaction.AddQuestionAction(qobj).then((res) => {
+            this.setState({
+                checked_a: false,
+                checked_b: false,
+                checked_c: false,
+                checked_d: false,
+                selectedtech: null,
+                selectedsubtech: null,
+                ismcq: true,
+            })
+            document.getElementById("fillup").value = '';
+            document.getElementById("op_d").value = ''
+            document.getElementById("op_c").value = ''
+            document.getElementById("op_b").value = ''
+            document.getElementById("op_a").value = ''
+            document.getElementById("radio1").checked = false;
+            document.getElementById("radio2").checked = false;
+            document.getElementById("radio3").checked = false;
+            document.getElementById("radio4").checked = false;
+        });
+
+        console.log("que", qobj)
+
+    }
+    render() {
+        var techoptions = []
+        var subtechoptions = []
+        // var techdata = []
+
+        this.props.technology.map((t) => {
+            let obj = {
+                value: t.techId,
+                label: t.techName
+            }
+            // let tobj = {
+            //     Name: t.techName
+            // }
+            techoptions.push(obj)
+            // techdata.push(tobj)
+            return true;
+        })
+
+        this.props.subtechnology.map((st) => {
+            let obj = {
+                value: st.subTechId,
+                label: st.subTechName
+            }
+            subtechoptions.push(obj)
+
+            return true;
+        })
+
+        return (
+            <>
+                <Row style={{ marginTop: "10px" }}>
+                    <div className="col">
+                        <Card className=" shadow">
+                            <CardHeader className=" bg-transparent">
+                                <h3 className=" mb-0">Question</h3>
+                            </CardHeader>
+                            <Nav tabs>
+                                <NavItem>
+                                    <NavLink
+                                        className={classnames({ active: this.state.activeTab === '1' })}
+                                        onClick={() => { this.QuestionToggle('1'); }}>
+                                        Add Manually
+                                    </NavLink>
+                                </NavItem>
+                                <NavItem>
+                                    <NavLink
+                                        className={classnames({ active: this.state.activeTab === '2' })}
+                                        onClick={() => { this.QuestionToggle('2'); }}>
+                                        Add through Excel Sheet
+                                    </NavLink>
+                                </NavItem>
+                            </Nav>
+                            <TabContent activeTab={this.state.activeTab}>
+                                <TabPane tabId="1">
+                                    <Row>
+                                        <Container>
+                                            <CardBody>
+                                                {/* {selecttechnology} */}
+                                                <Select
+                                                    name="selecttech"
+                                                    placeholder="Select Technology"
+                                                    value={this.state.selectedtech}
+                                                    onChange={this.SelectTechHandleChange}
+                                                    options={techoptions}
+                                                />
+                                                <br />
+                                                <Select
+                                                    id="selectsubtech"
+                                                    name="selectsubtech"
+                                                    placeholder="Select Sub-Technology"
+                                                    value={this.state.selectedsubtech}
+                                                    hidden
+                                                    onChange={this.SelectSubtechHandleChange}
+                                                    options={subtechoptions}
+                                                />
+                                                <br />
+
+                                                <Form>
+                                                    <FormGroup>
+                                                        {/* <Input type="text" id="technology" placeholder="Question" onClick={this.questionEditor.bind(this)} /> */}
+                                                        <RichTextBox txttype='que' text="Enter Question" />
+                                                    </FormGroup>
+                                                    <FormGroup style={{ float: "right", cursor: "pointer" }}>
+                                                        <Badge color="primary" pill onClick={this.mcqClick.bind(this)}>MCQ</Badge>{' '}
+                                                        <Badge color="primary" pill onClick={this.fillUpClick.bind(this)}>Fill Up</Badge>
+                                                    </FormGroup>
+                                                    <div>
+                                                        <Table id="mcq">
+                                                            <thead className="thead-light">
+                                                            <tr>
+                                                                <th scope="col">Sr.No</th>
+                                                                <th scope="col">Option</th>
+                                                                <th scope="col">Text with Image</th>
+                                                                <th scope="col">Answer</th>
+                                                            </tr>
+                                                            </thead>
+                                                            <tbody>
+                                                            <tr>
+                                                                <td>a</td>
+                                                                <td>
+                                                                    <div style={{ width: '650px' }}>
+                                                                        {(this.state.checked_a)
+                                                                            ? (<RichTextBox txttype='opt_a' text="Enter Option" />)
+                                                                            : (<Input type="text" id="op_a" placeholder="Option a" />)}
+                                                                    </div>
+                                                                </td>
+                                                                <td>
+                                                                    <CustomeSwitch
+                                                                        onChange={this.EditToggle_a}
+                                                                        checked={this.state.checked_a} />
+                                                                </td>
+                                                                <td><Input value="a" style={{ marginLeft: "20px" }} type="radio" id="radio1" name="radio1" /></td>
+                                                            </tr>
+                                                            <tr>
+                                                                <td>b</td>
+                                                                <td>
+                                                                    <div style={{ width: '650px' }}>
+                                                                        {(this.state.checked_b)
+                                                                            ? (<RichTextBox txttype='opt_b' text="Enter Option" />)
+                                                                            : (<Input type="text" id="op_b" placeholder="Option b" />)}
+                                                                    </div>
+                                                                </td>
+                                                                <td>
+                                                                    <CustomeSwitch
+                                                                        onChange={this.EditToggle_b}
+                                                                        checked={this.state.checked_b} />
+                                                                </td>
+                                                                <td><Input value="b" style={{ marginLeft: "20px" }} type="radio" id="radio2" name="radio2" /></td>
+                                                            </tr>
+                                                            <tr>
+                                                                <td>c</td>
+                                                                <td>
+                                                                    <div style={{ width: '650px' }}>
+                                                                        {(this.state.checked_c)
+                                                                            ? (<RichTextBox txttype='opt_c' text="Enter Option" />)
+                                                                            : (<Input type="text" id="op_c" placeholder="Option c" />)}
+                                                                    </div>
+                                                                </td>
+                                                                <td>
+                                                                    <CustomeSwitch
+                                                                        onChange={this.EditToggle_c}
+                                                                        checked={this.state.checked_c} />
+                                                                </td>
+                                                                <td><Input value="c" style={{ marginLeft: "20px" }} type="radio" id="radio3" name="radio3" /></td>
+                                                            </tr>
+                                                            <tr>
+                                                                <td>d</td>
+                                                                <td>
+                                                                    <div style={{ width: '650px' }}>
+                                                                        {(this.state.checked_d)
+                                                                            ? (<RichTextBox txttype='opt_d' text="Enter Option" />)
+                                                                            : (<Input type="text" id="op_d" placeholder="Option d" />)}
+                                                                    </div>
+                                                                </td>
+                                                                <td>
+                                                                    <CustomeSwitch
+                                                                        onChange={this.EditToggle_d}
+                                                                        checked={this.state.checked_d} />
+                                                                </td>
+                                                                <td><Input value="d" style={{ marginLeft: "20px" }} type="radio" id="radio4" name="radio4" /></td>
+                                                            </tr>
+                                                            </tbody>
+                                                        </Table>
+                                                        <Input id="fillup" hidden type="text" placeholder="Answer" />
+                                                    </div>
+                                                    <Button onClick={this.addQuestion} style={{ float: "right", margin: "15px" }}>Add Question</Button>
+                                                </Form>
+                                            </CardBody>
+                                        </Container>
+                                    </Row>
+                                </TabPane>
+
+                                <TabPane tabId="2">
+                                    <Row>
+                                        <Col sm="8">
+                                            <Card body>
+                                                <Select
+                                                    name="fselecttech"
+                                                    placeholder="Select Technology"
+                                                    value={this.state.selectedtech}
+                                                    onChange={this.SelectTechHandleChange}
+                                                    options={techoptions}
+                                                /> <br />
+                                                <Select
+                                                    id="fselectsubtech"
+                                                    name="fselectsubtech"
+                                                    placeholder="Select Sub-Technology"
+                                                    value={this.state.selectedsubtech}
+                                                    hidden
+                                                    onChange={this.SelectSubtechHandleChange}
+                                                    options={subtechoptions}
+                                                />
+                                                <input type="file" onChange={this.fileHandler.bind(this)} style={{ margin: "20px" }} />
+                                                <Button>Upload</Button>
+                                            </Card>
+                                        </Col>
+                                        {/* <Container style={{ "padding": "30px" }}>
+                                                <OutTable data={this.state.rows} columns={this.state.cols} tableClassName="ExcelTable2007" tableHeaderRowClass="heading" />
+                                            </Container> */}
+                                    </Row>
+                                </TabPane>
+                            </TabContent>
+                        </Card>
+                    </div>
+                </Row>
+            </>
+        );
+    }
+}
+const mapStateToProps = (state) => {
+    return {
+        technology: state.tech.technology,
+        subtechnology: state.tech.subtechnology
+    }
+}
+const mapDispatchToProps = (dispatch) => {
+    return {
+        techaction: bindActionCreators(techAction, dispatch),
+        queaction: bindActionCreators(queAction, dispatch)
+    }
+}
+
+export default connect(mapStateToProps, mapDispatchToProps)(AddQuestions);
Index: src/Admin/TechnologyQuestion/AddTechnology.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Admin/TechnologyQuestion/AddTechnology.js	(date 1558075849000)
+++ src/Admin/TechnologyQuestion/AddTechnology.js	(date 1558511878000)
@@ -3,19 +3,110 @@
 import * as techAction from '../../Action/techAction'
 import { bindActionCreators } from 'redux';
 import { connect } from 'react-redux'
-import '../../assets/css/styles.css'
 
 class AddTechnology extends Component {
     constructor(props) {
         super(props);
         this.state = {
+            isedit: false,
+            editdata: '',
             isopen: false,
             checked: false,
             subTechInput: 0,
             technology: '',
             subtechnology: [],
+            delTechId: [],
+            ishide: {
+                plusIcon: false,
+                AddSubTechForm: true,
+                AddTechForm: true,
+                addTech: false,
+                cancelTech: false,
+                level: false,
+            },
+            flag: true
         }
     }
+    componentWillReceiveProps = (nextProps) => {
+
+        if (nextProps.isedit && this.state.flag) {
+            this.plusTechnology()
+            const data = nextProps.editdata
+
+            if (data.level !== 0) {
+
+                const subtech = data.SubTechnologies
+                let subt = subtech.map((t) => {
+                    return {
+                        subTechId: t.subTechId,
+                        subTechName: t.subTechName
+                    }
+
+                })
+                this.setState({
+                    checked: true,
+                    subTechInput: subtech.length,
+                    subtechnology: subt,
+                    ishide: {
+                        ...this.state.ishide,
+                        AddTechForm: false,
+                        plusIcon: true,
+                        AddSubTechForm: false,
+                        addTech: true,
+                        cancelTech: true,
+                        level: true
+                    }
+                })
+            }
+            else {
+                this.setState({
+
+                    checked: false,
+                    subTechInput: 0,
+                    subtechnology: [],
+                    ishide: {
+                        flag: true,
+                        ...this.state.ishide,
+                        AddTechForm: false,
+                        plusIcon: true,
+                        AddSubTechForm: true,
+                        addTech: false,
+                        cancelTech: false,
+                        level: false
+                    }
+                })
+            }
+            this.setState({
+                technology: data.techName,
+            })
+        }
+        this.setState({
+            flag: true,
+            isedit: nextProps.isedit,
+            editdata: nextProps.editdata
+        })
+    }
+    addSubTechInput = () => {
+        if (this.state.isedit) {
+            const subtech = this.state.subtechnology
+            subtech.push({ subTechName: '' })
+            this.setState({ subtechnology: subtech })
+        }
+        this.setState({ subTechInput: this.state.subTechInput + 1 })
+    }
+
+    removeSubTechInput = () => {
+
+        let subTech = this.state.subtechnology
+        let deleted = subTech.pop();
+        if (this.state.isedit) {
+            if (deleted.subTechId !== undefined) {
+                const dtech = this.state.delTechId
+                dtech.push(deleted.subTechId)
+            }
+        }
+        this.setState({ subTechInput: this.state.subTechInput - 1, subtechnology: subTech })
+    }
 
     onChangeTechnology = (e) => {
         let value = e.target.value;
@@ -25,23 +116,54 @@
     }
     onChangeSubtechnology = (e) => {
         let subTech = this.state.subtechnology;
-
-        for (let i = 0; i < this.state.subTechInput; i++) {
-            if (e.target.name === "subtech" + JSON.stringify(i)) {
-                subTech[i] = e.target.value
+        if (this.state.isedit) {
+            for (let i = 0; i < this.state.subTechInput; i++) {
+                if (e.target.name === "subtech" + JSON.stringify(i)) {
+                    subTech[i] = {
+                        ...subTech[i],
+                        subTechName: e.target.value
+                    }
+                }
+            }
+        }
+        else {
+
+            for (let i = 0; i < this.state.subTechInput; i++) {
+                if (e.target.name === "subtech" + JSON.stringify(i)) {
+                    subTech[i] = e.target.value
+                }
             }
         }
         this.setState({ subtechnology: subTech })
     }
     plusTechnology = () => {
-        this.setState({ isopen: !this.state.isopen })
-        document.getElementById("AddTechForm").hidden = false;
-        document.getElementById("plusIcon").hidden = true;
+        this.setState({
+            isopen: !this.state.isopen,
+            ishide: {
+                ...this.state.ishide,
+                AddTechForm: false,
+                plusIcon: true
+            }
+        })
+        // document.getElementById("AddTechForm").hidden = false;
+        // document.getElementById("plusIcon").hidden = true;
     }
     checked = (e) => {
+        if (this.state.isedit) {
+            this.setState({
+                subtechnology: [{ subTechName: '' }]
+            })
+        }
         this.setState({
             checked: !this.state.checked,
-            subTechInput: 1
+            subTechInput: 1,
+            ishide: {
+                ...this.state.ishide,
+                AddSubTechForm: false,
+                addTech: true,
+                cancelTech: true,
+                level: true
+            }
         })
     }
     validate = () => {
@@ -54,49 +176,81 @@
         }
         else {
             let st = this.state.subtechnology;
-            for (let x = 0; x < this.state.subTechInput; x++) {
-                if (st[x] === undefined) {
-                    st[x] = ""
-                }
-            }
-            for (let i = 0; i < st.length; i++) {
-                if (st[i] === "") {
-                    document.getElementById("subtech" + JSON.stringify(i)).focus();
-                    flag = 0;
-                    break;
+            console.log("==", st)
+            if (this.state.isedit) {
+                for (let i = 0; i < st.length; i++) {
+                    if (st[i].subTechName === "") {
+                        document.getElementById("subtech" + JSON.stringify(i)).focus();
+                        flag = 0;
+                        break;
+                    }
+                }
+            }
+            else {
+                for (let x = 0; x < this.state.subTechInput; x++) {
+                    if (st[x] === undefined) {
+                        st[x] = ""
+                    }
+                }
+                for (let i = 0; i < st.length; i++) {
+                    if (st[i] === "") {
+                        document.getElementById("subtech" + JSON.stringify(i)).focus();
+                        flag = 0;
+                        break;
+                    }
                 }
             }
+
         }
         return flag
     }
     addTechnology = () => {
+        debugger
         if (this.validate()) {
-
+            if (this.state.delTechId.length > 0) {
+                this.state.delTechId.map((sid) => {
+                    debugger
+                    this.props.techaction.DeleteSubtechnologyAction(sid)
+                    return true
+                })
+            }
             var l = (this.state.checked) ? 1 : 0;
             let obj = {
                 techName: this.state.technology,
                 level: l,
                 subTechnologies: this.state.subtechnology
             }
-            this.props.techaction.AddTechnologyAction(obj);
+            console.log("add..", obj)
+            if (this.state.isedit) {
+                this.setState({ flag: false })
+                this.props.techaction.EditTechnologyAction(this.state.editdata.techId, obj);
+            } else {
+                this.props.techaction.AddTechnologyAction(obj);
+            }
+
             this.setState({
+                isedit: false,
+                editdata: '',
                 checked: false,
                 subTechInput: 0,
                 technology: '',
-                subtechnology: []
+                subtechnology: [],
+                isopen: false,
+                ishide: {
+                    ...this.state.ishide,
+                    AddSubTechForm: true,
+                    AddTechForm: true,
+                    plusIcon: false,
+                    addTech: false,
+                    cancelTech: false,
+                    level: false
+                }
             })
-            document.getElementById("AddTechForm").hidden = true;
-            document.getElementById("plusIcon").hidden = false;
-            document.getElementById("addTech").hidden = false;
-            document.getElementById("cancelTech").hidden = false;
-            document.getElementById("AddSubTechForm").hidden = true;
-            document.getElementById("level").disabled = false;
         }
         else {
             console.log("error..:(")
         }
     }
-
     cancelTechnology = () => {
         document.getElementById("AddTechForm").hidden = true;
         document.getElementById("plusIcon").hidden = false;
@@ -105,39 +259,51 @@
             checked: false,
             subTechInput: 0,
             technology: '',
-            subtechnology: []
+            subtechnology: [],
+            isopen: false,
+            ishide: {
+                ...this.state.ishide,
+                AddTechForm: true,
+                plusIcon: false
+            }
         })
+        if (this.props.isedit) {
+            this.props.toggle()
+        }
     }
     cancelSubTechnology = (e) => {
+        if (this.state.isedit) {
+            if (this.state.subtechnology.length > 0) {
+
+                let st = this.state.delTechId
+                this.state.subtechnology.map((s) => {
+                    if (s.subTechId !== undefined) {
+                        st.push(s.subTechId)
+                    }
+                    return true
+                })
+                this.setState({
+                    delTechId: st
+                })
+            }
+        }
         this.setState({
             checked: !this.state.checked,
             subTechInput: 0,
-            subtechnology: []
+            subtechnology: [],
+            ishide: {
+                ...this.state.ishide,
+                AddSubTechForm: true,
+                addTech: false,
+                cancelTech: false,
+                level: false
+            }
         })
-        document.getElementById("AddSubTechForm").hidden = true;
-        document.getElementById("addTech").hidden = false;
-        document.getElementById("cancelTech").hidden = false;
-        document.getElementById("level").disabled = false;
 
-    }
-    addSubTechInput = () => {
-        this.setState({ subTechInput: this.state.subTechInput + 1 })
-    }
-
-    removeSubTechInput = () => {
-        let subTech = this.state.subtechnology
-        subTech.pop();
-        this.setState({ subTechInput: this.state.subTechInput - 1, subtechnology: subTech })
     }
 
     render() {
-        const { checked } = this.state;
-        if (checked) {
-            document.getElementById("AddSubTechForm").hidden = false;
-            document.getElementById("addTech").hidden = true;
-            document.getElementById("cancelTech").hidden = true;
-            document.getElementById("level").disabled = true;
-        }
+        console.log("ishide", this.state.ishide)
 
         let subTechDisplay = [], renderSubTechInput;
         for (let i = 0; i < this.state.subTechInput; i++) {
@@ -145,6 +311,7 @@
         }
 
         renderSubTechInput = subTechDisplay.map((value) => {
+            const stechvalue = (this.state.isedit) ? this.state.subtechnology[value].subTechName : this.state.subtechnology[value]
             return (
                 <div key={value}>
                     {value === 0
@@ -156,36 +323,19 @@
                         </div>
                         : ""}
                     <Input type="text" id={"subtech" + JSON.stringify(value)} name={"subtech" + JSON.stringify(value)}
-                        placeholder="Sub-Technology"
-                        style={{ marginBottom: "5px" }}
-                        key={value}
-                        value={this.state.subtechnology[value]}
-                        onChange={this.onChangeSubtechnology.bind(this)} />
+                           placeholder="Sub-Technology"
+                           style={{ marginBottom: "5px" }}
+                           key={value}
+                           value={stechvalue}
+                           onChange={this.onChangeSubtechnology.bind(this)} />
                 </div>
             );
         });
 
         return (
             <>
-                {/* <i className="ni ni-fat-add" style={{ fontSize: "40px" }} id="plusIcon" onClick={this.plusTechnology}></i> */}
-                <div className="tech_header">
-                    <div className="tech_add">
-                        <i className="ni ni-fat-add" style={{ fontSize: "40px" }} id="plusIcon" onClick={this.plusTechnology}></i>
-                    </div>
-                    <div className="number_drp">
-                        <Container>
-                            <Input type="select" name="select" >
-                                <option value="5">5</option>
-                                <option value="10">10</option>
-                                <option value="25">25</option>
-                                <option value="50">50</option>
-                                <option value="100">100</option>
-                                <option value="All">All</option>
-                            </Input>
-                        </Container>
-                    </div>
-                </div>
-                <Container id="AddTechForm" hidden style={{ border: "1px solid lightgrey", borderRadius: "6px", marginBottom: "10px" }}>
+                <i className="ni ni-fat-add" hidden={this.state.ishide.plusIcon} style={{ fontSize: "40px" }} id="plusIcon" onClick={this.plusTechnology}></i>
+                <Container id="AddTechForm" hidden={this.state.ishide.AddTechForm} style={{ border: "1px solid lightgrey", borderRadius: "6px", marginBottom: "10px" }}>
                     <Form>
                         <h3 style={{ marginTop: "6px" }}> Add Technology</h3>
                         <FormGroup>
@@ -193,27 +343,29 @@
                         </FormGroup>
                         <FormGroup check style={{ marginTop: "10px", marginBottom: "15px", fontSize: "15px" }}>
                             <Label check>
-                                <Input type="checkbox" id="level" checked={this.state.checked} onChange={this.checked.bind(this)} />{' '}
+                                <Input type="checkbox" id="level" checked={this.state.checked} onChange={this.checked.bind(this)} disabled={this.state.ishide.level} />{' '}
                                 <div style={{ marginLeft: '20px' }}>Want to add Level?</div>
                             </Label>
                         </FormGroup>
                         <FormGroup>
-                            <Button id="addTech" onClick={this.addTechnology}>Add</Button>
-                            <Button id="cancelTech" onClick={this.cancelTechnology}>Cancel</Button>
+
+                            <Button id="addTech"  hidden={this.state.ishide.addTech} onClick={this.addTechnology}>{this.state.isedit ? ("Edit") : ("Add")}</Button>
+
+                            <Button id="cancelTech" hidden={this.state.ishide.cancelTech} onClick={this.cancelTechnology}>Cancel</Button>
                         </FormGroup>
                     </Form>
-                    <Container id="AddSubTechForm" hidden style={{ border: "1px solid lightgrey", borderRadius: "6px", marginBottom: "10px" }}>
+                    <Container id="AddSubTechForm" hidden={this.state.ishide.AddSubTechForm} style={{ border: "1px solid lightgrey", borderRadius: "6px", marginBottom: "10px" }}>
                         <Form>
                             <h3 style={{ marginTop: "6px" }}> Add Sub-Technology</h3>
                             <FormGroup>
-                                {/*  <i className="ni ni-fat-add" style={{ fontSize: "35px" }} id="plus"></i>  */}
                                 {this.state.subTechInput
                                     ? <div className='header-center mt10'>
                                         {renderSubTechInput}
                                     </div> : ""}
                             </FormGroup>
                             <FormGroup>
-                                <Button onClick={this.addTechnology}>Add</Button>
+                                <Button onClick={this.addTechnology}>{this.state.isedit ? ("Edit") : ("Add")}</Button>
+
                                 <Button onClick={this.cancelSubTechnology.bind(this)}>Cancel</Button>
                             </FormGroup>
                         </Form>
@@ -237,4 +389,4 @@
     }
 }
 
-export default connect(mapStateToProps, mapDispatchToProps)(AddTechnology); 
\ No newline at end of file
+export default connect(mapStateToProps, mapDispatchToProps)(AddTechnology); 
Index: src/Admin/TechnologyQuestion/Technology.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Admin/TechnologyQuestion/Technology.js	(date 1558075849000)
+++ src/Admin/TechnologyQuestion/Technology.js	(date 1558511878000)
@@ -1,20 +1,16 @@
 import 'react-bootstrap-table/dist/react-bootstrap-table.min.css';
 
-import classnames from 'classnames';
 import Header from "components/Headers/Header.jsx";
 import React from "react";
 import { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';
-import { ExcelRenderer } from 'react-excel-renderer';
-import Select from 'react-select';
-import { Badge, Button, Card, CardBody, CardHeader, Col, Container, Form, FormGroup, Input, Nav, NavItem, NavLink, Row, TabContent, Table, TabPane } from "reactstrap";
-import CustomeSwitch from '../../components/CustomeSwitch/CustomeSwitch'
-import RichTextBox from '../../components/RichTextEditor/richtext'
-import * as techAction from '../../Action/techAction'
-import { bindActionCreators } from 'redux';
 import { connect } from 'react-redux'
+import { Card, CardBody, CardHeader, Container, Row, Button } from "reactstrap";
+import { bindActionCreators } from 'redux';
+import * as techAction from '../../Action/techAction'
+import AddQuestions from './AddQuestions'
 import AddTechnology from './AddTechnology'
-import * as queAction from '../../Action/queAction'
-import { glob_que, opt_a, opt_b, opt_c, opt_d } from '../../components/RichTextEditor/richtext'
+import { Popconfirm } from 'antd';
+
 
 class Technology extends React.Component {
     constructor(props) {
@@ -23,233 +19,46 @@
             activeTab: '1',
             cols: [],
             rows: [],
-            checked_a: false,
-            checked_b: false,
-            checked_c: false,
-            checked_d: false,
-            selectedtech: null,
-            selectedsubtech: null,
-            ismcq: true,
+            isedit: false,
+            editdata: '',
         };
+        this.toggle = this.toggle.bind(this);
 
-        this.QuestionToggle = this.QuestionToggle.bind(this);
     }
-    // componentWillReceiveProps=(nextProps)=>{
-    //     if(nextProps.technology !== this.props.technology){
-    //         console.log("called");
-    //     }
-    // }
+
     componentDidMount() {
-        this.props.techaction.GetTechnologyAction().then((res) => {
-            document.getElementById("selectsubtech").hidden = true;
-            document.getElementById("fselectsubtech").hidden = true;
-        })
+        this.props.techaction.GetTechnologyAction()
     }
-    QuestionToggle(tab) {
-        if (this.state.activeTab !== tab) {
-            this.setState({
-                activeTab: tab
-            });
-        }
-    }
-    SelectTechHandleChange = (selectedOption) => {
-        document.getElementById("selectsubtech").hidden = true;
-        document.getElementById("fselectsubtech").hidden = true;
-        let techId = selectedOption.value
-        this.props.technology.map((t) => {
-            if (t.techId === JSON.parse(techId)) {
-                if (t.level === 1) {
-                    this.props.techaction.GetSubtechnologyAction(techId)
-                    document.getElementById("selectsubtech").hidden = false;
-                    document.getElementById("fselectsubtech").hidden = false;
-                }
-            }
-            return true
+
+    toggle() {
+        this.setState(prevState => ({
+            isedit: !prevState.isedit
+        }));
+    }
+    EditTechnology = (tech, e) => {
+        this.setState({
+            isedit: true,
+            editdata: tech
         })
-        this.setState({ selectedtech: selectedOption, selectedsubtech: null });
     }
-    SelectSubtechHandleChange = (selectedOption) => {
-        this.setState({ selectedsubtech: selectedOption });
+    DeleteTechnology = (techId, e) => {
+        this.props.techaction.DeleteTechnologyAction(techId);
     }
-    fileHandler = (event) => {
-        let fileObj = event.target.files[0];
-        ExcelRenderer(fileObj, (err, resp) => {
-            if (err) {
-                console.log(err);
-            }
-            else {
-                this.setState({
-                    cols: resp.cols,
-                    rows: resp.rows
-                });
-            }
-        });
-    }
-    mcqClick() {
-        document.getElementById("mcq").hidden = false;
-        document.getElementById("fillup").hidden = true;
-        this.setState({ ismcq: true });
-    }
-    fillUpClick() {
-        document.getElementById("mcq").hidden = true;
-        document.getElementById("fillup").hidden = false;
-        this.setState({ ismcq: false });
-    }
-    questionEditor() {
-
-    }
-    EditToggle_a = (e) => {
-        this.setState({ checked_a: !this.state.checked_a });
-    }
-    EditToggle_b = (e) => {
-        this.setState({ checked_b: !this.state.checked_b });
-    }
-    EditToggle_c = (e) => {
-        this.setState({ checked_c: !this.state.checked_c });
-    }
-    EditToggle_d = (e) => {
-        this.setState({ checked_d: !this.state.checked_d });
-    }
-    addQuestion = () => {
-        var a, b, c, d;
-        const techid = (this.state.selectedtech !== null) ? this.state.selectedtech.value : 0;
-        const subtechid = (this.state.selectedsubtech !== null) ? this.state.selectedsubtech.value : null;
-        let obj
-        if (this.state.ismcq) {
-            if (this.state.checked_a) {
-                a = { text: opt_a };
-            }
-            else {
-                let aa = document.getElementById("op_a").value
-                a = { text: aa }
-            }
-            if (this.state.checked_b) {
-                b = { text: opt_b };
-            }
-            else {
-                let bb = document.getElementById("op_b").value
-                b = { text: bb }
-            }
-            if (this.state.checked_c) {
-                c = { text: opt_c };
-            }
-            else {
-                let cc = document.getElementById("op_c").value
-                c = { text: cc }
-            }
-            if (this.state.checked_d) {
-                d = { text: opt_d };
-            }
-            else {
-                let dd = document.getElementById("op_d").value
-                d = { text: dd }
-            }
-            let ans = ''
-            if (document.getElementById("radio1").checked) {
-                ans = a
-            }
-            else if (document.getElementById("radio2").checked) {
-                ans = b
-            }
-            else if (document.getElementById("radio3").checked) {
-                ans = c
-            }
-            else if (document.getElementById("radio4").checked) {
-                ans = d
-            }
-            obj = {
-                techId: parseInt(techid),
-                subTechId: parseInt(subtechid),
-                question: JSON.stringify({ text: glob_que }),
-                a: JSON.stringify(a),
-                b: JSON.stringify(b),
-                c: JSON.stringify(c),
-                d: JSON.stringify(d),
-                answer: JSON.stringify(ans)
-            }
-        }
-        else {
-            let ans = document.getElementById("fillup").value
-            obj = {
-                techId: parseInt(techid),
-                subTechId: parseInt(subtechid),
-                question: JSON.stringify({ text: glob_que }),
-                a: null,
-                b: null,
-                c: null,
-                d: null,
-                answer: JSON.stringify({ text: ans })
-            }
-        }
-        let qobj = {
-            questions: [obj]
-        }
-        this.props.queaction.AddQuestionAction(qobj).then((res) => {
-            this.setState({
-                checked_a: false,
-                checked_b: false,
-                checked_c: false,
-                checked_d: false,
-                selectedtech: null,
-                selectedsubtech: null,
-                ismcq: true,
-            })
-            document.getElementById("fillup").value = '';
-            document.getElementById("op_d").value = ''
-            document.getElementById("op_c").value = ''
-            document.getElementById("op_b").value = ''
-            document.getElementById("op_a").value = ''
-            document.getElementById("radio1").checked = false;
-            document.getElementById("radio2").checked = false;
-            document.getElementById("radio3").checked = false;
-            document.getElementById("radio4").checked = false;
-        });
-
-        console.log("que", qobj)
-
-    }
-    render() {
-        var techoptions = []
-        var subtechoptions = []
-        var techdata = []
-
-        function ActionbuttonDisplay(cell) {
-            return (
-                <div>
-                    <i style={{ fontSize: "25px", paddingRight: "15px" }} className="ni ni-ruler-pencil"></i>
+    ActionbuttonDisplay = (cell, rowData, extradata) => {
+        return (
+            <div>
+                <i style={{ fontSize: "25px", paddingRight: "15px" }} onClick={extradata.EditTechnology.bind(extradata, rowData)} className="ni ni-ruler-pencil"></i>
+                <Popconfirm title="Are you sure you want to delete it?" onConfirm={extradata.DeleteTechnology.bind(extradata, cell)} okText="Yes" cancelText="No">
                     <i style={{ fontSize: "25px" }} className="ni ni-fat-remove"></i>
-                </div>
-            );
-        }
-
-        this.props.technology.map((t) => {
-            let obj = {
-                value: t.techId,
-                label: t.techName
-            }
-            let tobj = {
-                Name: t.techName
-            }
-            techoptions.push(obj)
-            techdata.push(tobj)
-            return true;
-        })
-
-        this.props.subtechnology.map((st) => {
-            let obj = {
-                value: st.subTechId,
-                label: st.subTechName
-            }
-            subtechoptions.push(obj)
-
-            return true;
-        })
-
+                </Popconfirm>
+            </div>
+        );
+    }
+    render() {
         return (
-            <>
+            <div>
                 <Header />
                 <Container className=" mt--7" fluid>
-                    {/* Technology */}
                     <Row>
                         <div className=" col">
                             <Card className=" shadow">
@@ -257,196 +66,24 @@
                                     <h3 className=" mb-0">Technology</h3>
                                 </CardHeader>
                                 <CardBody>
-                                    <AddTechnology />
-                                    <BootstrapTable data={techdata} striped hover>
-                                        <TableHeaderColumn isKey dataField="Name" width="200"
-                                            filter={{ type: 'TextFilter' }} dataSort={true}>Name</TableHeaderColumn>
-                                        <TableHeaderColumn dataFormat={ActionbuttonDisplay} width="100" >Action</TableHeaderColumn>
+                                    <AddTechnology isedit={this.state.isedit} editdata={this.state.editdata} toggle={this.toggle} />
+                                    <BootstrapTable data={this.props.technology} striped hover>
+                                        <TableHeaderColumn dataField="techName" isKey width="200"
+                                                           filter={{ type: 'TextFilter' }} dataSort={true}>Name</TableHeaderColumn>
+                                        <TableHeaderColumn dataField="techId" formatExtraData={this}
+                                                           dataFormat={this.ActionbuttonDisplay} width="100" >Action</TableHeaderColumn>
                                     </BootstrapTable>
                                     <Button color="primary" style={{ width: "7%", padding: "10px", marginTop: "10px" }}>Next</Button>{' '}
                                     <Button color="primary" style={{ width: "7%", padding: "10px", marginTop: "10px" }}>Prev</Button>{' '}
+
                                 </CardBody>
                             </Card>
                         </div>
                     </Row>
                     {/* Questions */}
-                    <Row style={{ marginTop: "10px" }}>
-                        <div className="col">
-                            <Card className=" shadow">
-                                <CardHeader className=" bg-transparent">
-                                    <h3 className=" mb-0">Question</h3>
-                                </CardHeader>
-                                <Nav tabs>
-                                    <NavItem>
-                                        <NavLink
-                                            className={classnames({ active: this.state.activeTab === '1' })}
-                                            onClick={() => { this.QuestionToggle('1'); }}>
-                                            Add Manually
-                                    </NavLink>
-                                    </NavItem>
-                                    <NavItem>
-                                        <NavLink
-                                            className={classnames({ active: this.state.activeTab === '2' })}
-                                            onClick={() => { this.QuestionToggle('2'); }}>
-                                            Add through Excel Sheet
-                                    </NavLink>
-                                    </NavItem>
-                                </Nav>
-                                <TabContent activeTab={this.state.activeTab}>
-                                    <TabPane tabId="1">
-                                        <Row>
-                                            <Container>
-                                                <CardBody>
-                                                    {/* {selecttechnology} */}
-                                                    <Select
-                                                        name="selecttech"
-                                                        placeholder="Select Technology"
-                                                        value={this.state.selectedtech}
-                                                        onChange={this.SelectTechHandleChange}
-                                                        options={techoptions}
-                                                    />
-                                                    <br />
-                                                    <Select
-                                                        id="selectsubtech"
-                                                        name="selectsubtech"
-                                                        placeholder="Select Sub-Technology"
-                                                        value={this.state.selectedsubtech}
-                                                        hidden
-                                                        onChange={this.SelectSubtechHandleChange}
-                                                        options={subtechoptions}
-                                                    />
-                                                    <br />
-
-                                                    <Form>
-                                                        <FormGroup>
-                                                            {/* <Input type="text" id="technology" placeholder="Question" onClick={this.questionEditor.bind(this)} /> */}
-                                                            <RichTextBox txttype='que' text="Enter Question" />
-                                                        </FormGroup>
-                                                        <FormGroup style={{ float: "right", cursor: "pointer" }}>
-                                                            <Badge color="primary" pill onClick={this.mcqClick.bind(this)}>MCQ</Badge>{' '}
-                                                            <Badge color="primary" pill onClick={this.fillUpClick.bind(this)}>Fill Up</Badge>
-                                                        </FormGroup>
-                                                        <div>
-                                                            <Table id="mcq">
-                                                                <thead className="thead-light">
-                                                                    <tr>
-                                                                        <th scope="col">Sr.No</th>
-                                                                        <th scope="col">Option</th>
-                                                                        <th scope="col">Text with Image</th>
-                                                                        <th scope="col">Answer</th>
-                                                                    </tr>
-                                                                </thead>
-                                                                <tbody>
-                                                                    <tr>
-                                                                        <td>a</td>
-                                                                        <td>
-                                                                            <div style={{ width: '650px' }}>
-                                                                                {(this.state.checked_a)
-                                                                                    ? (<RichTextBox txttype='opt_a' text="Enter Option" />)
-                                                                                    : (<Input type="text" id="op_a" placeholder="Option a" />)}
-                                                                            </div>
-                                                                        </td>
-                                                                        <td>
-                                                                            <CustomeSwitch
-                                                                                onChange={this.EditToggle_a}
-                                                                                checked={this.state.checked_a} />
-                                                                        </td>
-                                                                        <td><Input value="a" style={{ marginLeft: "20px" }} type="radio" id="radio1" name="radio1" /></td>
-                                                                    </tr>
-                                                                    <tr>
-                                                                        <td>b</td>
-                                                                        <td>
-                                                                            <div style={{ width: '650px' }}>
-                                                                                {(this.state.checked_b)
-                                                                                    ? (<RichTextBox txttype='opt_b' text="Enter Option" />)
-                                                                                    : (<Input type="text" id="op_b" placeholder="Option b" />)}
-                                                                            </div>
-                                                                        </td>
-                                                                        <td>
-                                                                            <CustomeSwitch
-                                                                                onChange={this.EditToggle_b}
-                                                                                checked={this.state.checked_b} />
-                                                                        </td>
-                                                                        <td><Input value="b" style={{ marginLeft: "20px" }} type="radio" id="radio2" name="radio2" /></td>
-                                                                    </tr>
-                                                                    <tr>
-                                                                        <td>c</td>
-                                                                        <td>
-                                                                            <div style={{ width: '650px' }}>
-                                                                                {(this.state.checked_c)
-                                                                                    ? (<RichTextBox txttype='opt_c' text="Enter Option" />)
-                                                                                    : (<Input type="text" id="op_c" placeholder="Option c" />)}
-                                                                            </div>
-                                                                        </td>
-                                                                        <td>
-                                                                            <CustomeSwitch
-                                                                                onChange={this.EditToggle_c}
-                                                                                checked={this.state.checked_c} />
-                                                                        </td>
-                                                                        <td><Input value="c" style={{ marginLeft: "20px" }} type="radio" id="radio3" name="radio3" /></td>
-                                                                    </tr>
-                                                                    <tr>
-                                                                        <td>d</td>
-                                                                        <td>
-                                                                            <div style={{ width: '650px' }}>
-                                                                                {(this.state.checked_d)
-                                                                                    ? (<RichTextBox txttype='opt_d' text="Enter Option" />)
-                                                                                    : (<Input type="text" id="op_d" placeholder="Option d" />)}
-                                                                            </div>
-                                                                        </td>
-                                                                        <td>
-                                                                            <CustomeSwitch
-                                                                                onChange={this.EditToggle_d}
-                                                                                checked={this.state.checked_d} />
-                                                                        </td>
-                                                                        <td><Input value="d" style={{ marginLeft: "20px" }} type="radio" id="radio4" name="radio4" /></td>
-                                                                    </tr>
-                                                                </tbody>
-                                                            </Table>
-                                                            <Input id="fillup" hidden type="text" placeholder="Answer" />
-                                                        </div>
-                                                        <Button onClick={this.addQuestion} style={{ float: "right", margin: "15px" }}>Add Question</Button>
-                                                    </Form>
-                                                </CardBody>
-                                            </Container>
-                                        </Row>
-                                    </TabPane>
-
-                                    <TabPane tabId="2">
-                                        <Row>
-                                            <Col sm="8">
-                                                <Card body>
-                                                    <Select
-                                                        name="fselecttech"
-                                                        placeholder="Select Technology"
-                                                        value={this.state.selectedtech}
-                                                        onChange={this.SelectTechHandleChange}
-                                                        options={techoptions}
-                                                    /> <br />
-                                                    <Select
-                                                        id="fselectsubtech"
-                                                        name="fselectsubtech"
-                                                        placeholder="Select Sub-Technology"
-                                                        value={this.state.selectedsubtech}
-                                                        hidden
-                                                        onChange={this.SelectSubtechHandleChange}
-                                                        options={subtechoptions}
-                                                    />
-                                                    <input type="file" onChange={this.fileHandler.bind(this)} style={{ margin: "20px" }} />
-                                                    <Button>Upload</Button>
-                                                </Card>
-                                            </Col>
-                                            {/* <Container style={{ "padding": "30px" }}>
-                                                <OutTable data={this.state.rows} columns={this.state.cols} tableClassName="ExcelTable2007" tableHeaderRowClass="heading" />
-                                            </Container> */}
-                                        </Row>
-                                    </TabPane>
-                                </TabContent>
-                            </Card>
-                        </div>
-                    </Row>
-                </Container>
-            </>
+                    <AddQuestions />
+                </Container>
+            </div>
         );
     }
 }
@@ -460,8 +97,7 @@
 const mapDispatchToProps = (dispatch) => {
     return {
         techaction: bindActionCreators(techAction, dispatch),
-        queaction: bindActionCreators(queAction, dispatch)
     }
 }
 
-export default connect(mapStateToProps, mapDispatchToProps)(Technology);
\ No newline at end of file
+export default connect(mapStateToProps, mapDispatchToProps)(Technology);
Index: src/Admin/Test/Test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Admin/Test/Test.js	(date 1558075849000)
+++ src/Admin/Test/Test.js	(date 1558511878000)
@@ -27,7 +27,7 @@
 import {TimePicker, notification, Popconfirm} from 'antd';
 import moment from 'moment';
 import Switch from "react-switch";
-import {forEach, includes, map, findIndex} from 'lodash';
+import {forEach, includes, map, findIndex } from 'lodash';
 
 import 'react-bootstrap-table/dist/react-bootstrap-table.min.css';
 import "react-datepicker/dist/react-datepicker.css";
@@ -75,7 +75,9 @@
             recordPerPage: 5,
             offset: 0,
             fieldName: 'testId',
-            sortDirection: 'ASC'
+            sortDirection: 'ASC',
+            showRatioForTech: false,
+            selectAll:false
         };
 
         this.TestTabToggle = this.TestTabToggle.bind(this);
@@ -172,74 +174,65 @@
 
     TechRatioChangehandler(techId, e) {
         this.setState({errors: {}})
-        // var find = findIndex(techRatio, (x, value) => { return +Object.keys(x)[0] === techId });
-        // if (find !== -1 || find === 0) {
-        //     techRatio[find][e.target.name] = e.target.value;
-        // } else {
-        //     techRatio.push({ [e.target.name]: e.target.value })
-        // }
-        let index;
-        if (techRatio.filter((r, i) => {
-            if (r[techId]) {
-                index = i;
-                return r[techId];
-            }
-            return null
-        }).length > 0)
-            techRatio[index][e.target.name] = e.target.value
-        else
-            techRatio.push({
-                [e.target.name]: e.target.value
-            })
+        var find = findIndex(techRatio, (x, value) => { return +Object.keys(x)[0] === techId });
+        if (find !== -1 || find === 0) {
+            techRatio[find][e.target.name] = e.target.value;
+        } else {
+            techRatio.push({ [e.target.name]: e.target.value })
+        }
     }
 
     SubTechRatioChangehandler(techId, e) {
         this.setState({errors: {}})
-        // var find = findIndex(subTechRatio, (x, value) => { return +Object.keys(x)[0] === techId });
-        // if (find !== -1 || find === 0) {
-        //     subTechRatio[find][techId][e.target.name] = e.target.value;
-        // } else {
-        //     subTechRatio.push({
-        //         [techId]: { [e.target.name]: e.target.value }
-        //     })
-        // }
-
-        let index;
-        if (subTechRatio.filter((r, i) => {
-            if (r[techId]) {
-                index = i;
-                return r[techId];
-            }
-            return null
-        }).length > 0)
-            subTechRatio[index][techId][e.target.name] = e.target.value
-        else
+        var find = findIndex(subTechRatio, (x, value) => { return +Object.keys(x)[0] === techId });
+        if (find !== -1 || find === 0) {
+            subTechRatio[find][techId][e.target.name] = e.target.value;
+        } else {
             subTechRatio.push({
-                [techId]: {
-                    [e.target.name]: e.target.value
-                }
+                [techId]: { [e.target.name]: e.target.value }
             })
+        }
     }
+
+    updateTestRatio = (selectedOption) => {
+        const { test: { ratio = [] } } = this.state;
+        let selectedOptionValue = [];
+        selectedOption.forEach(_ => {
+            selectedOptionValue.push(_.value);
+        });
+        ratio.forEach(_=>{
+            if(!includes(selectedOptionValue, _.techId)){
+                const techRatioIndex = findIndex(ratio, _);
+                ratio.splice(techRatioIndex, 1);
+            }
+        })
+        this.setState({test : { ...this.state.test, ratio }, selectedOption,selectAll:false})
+    };
 
     SelectHandleChange = (selectedOption) => {
-        this.setState({errors: {}})
+        debugger
+        const { test: { ratio = [] } } = this.state;
+        ratio.length && this.updateTestRatio(selectedOption);
+        debugger
+        this.setState({errors: {}});
         let extra = this;
         if (selectedOption.length < 1) {
-            document.getElementById("allTech").hidden = true;
             techRatio = [];
             subTechRatio = [];
+            this.setState({showRatioForTech: false,selectAll:false});
         } else {
             allTech = [];
             techRatio = [];
             subTechRatio = [];
-            document.getElementById("allTech").hidden = false;
+            this.setState({showRatioForTech: true});
             selectedOption.map(option => {
                 if (option.label === "All") {
+                    this.setState({selectAll:true});
                     selectedOption = selectedOption.filter((t) => {
                         return t.label === option.label
                     })
                     allTech = [];
-                    if (extra.props.getTechnology && extra.props.getTechnology.length !== 0) {
+                    if (extra.props.getTechnology.length) {
                         extra.props.getTechnology.map((technology, i) => {
                             if (technology.level === 1) {
                                 technology.SubTechnologies.map((subTech, j) => {
@@ -285,7 +278,8 @@
                         })
                     }
                 } else {
-                    if (extra.props.getTechnology && extra.props.getTechnology.length !== 0) {
+                    this.setState({selectAll:false})
+                    if (extra.props.getTechnology && extra.props.getTechnology.length) {
                         extra.props.getTechnology.map((technology, i) => {
                             if (option.label === technology.techName) {
                                 if (technology.level === 1) {
@@ -397,7 +391,7 @@
             let totalRatioCount = 0;
             let rat = Ratio;
             rat.map(r => {
-                if (r.subTech && r.subTech.length !== 0) {
+                if (r.subTech && r.subTech.length) {
                     r.subTech.map(sub => {
                         return totalRatioCount += sub.ratio
                     })
@@ -414,7 +408,7 @@
                 this.setState({
                     test: {
                         ...this.state.test,
-                        ratio: JSON.stringify(Ratio)
+                        ratio: Ratio
                     }
                 })
                 this.openNotificationWithIcon('success', "Ratio Added");
@@ -426,7 +420,15 @@
         e.preventDefault();
         let fieldsErrors = {};
         const {test, errors, selectedOption} = this.state;
-        if (test.testName === "" && test.totalQuestion === 0 && test.date === "" && test.duration === "" && test.professor === "" && test.description === "" && test.token === "" && selectedOption === null) {
+        if (
+            test.testName === "" &&
+            test.totalQuestion === 0 &&
+            test.date === "" &&
+            test.duration === "" &&
+            test.professor === "" &&
+            test.description === "" &&
+            test.token === "" &&
+            selectedOption === null) {
             this.openNotificationWithIcon('error', "Please Fill the Details to add Test");
         } else {
             //token
@@ -496,7 +498,7 @@
                         date: test.date,
                         duration: test.duration,
                         professor: test.professor,
-                        ratio: test.ratio,
+                        ratio: JSON.stringify(test.ratio),
                         token: test.token
                     }
                 } else {
@@ -506,11 +508,11 @@
                         totalQuestion: test.totalQuestion,
                         date: test.date,
                         professor: test.professor,
-                        ratio: test.ratio,
+                        ratio: JSON.stringify(test.ratio),
                         token: test.token
                     }
                 }
-                if (test.ratio && test.ratio.length !== 0) {
+                if (test.ratio && test.ratio.length) {
 
                     this.setState({test: {}, selectedOption: null})
                     this.props.action.TestAction.addTest(testData);
@@ -546,20 +548,31 @@
     }
 
     render() {
-        const {selectedOption} = this.state;
+        const {selectedOption, showRatioForTech,selectAll } = this.state;
+        const { getTechnology = [], getTest = [] } = this.props;
         let techOptions = [];
         let testData = [];
         let noMoreData = 0;
 
-        if (this.props.getTechnology && this.props.getTechnology.length !== 0) {
-            this.props.getTechnology.map(technology => {
-                return techOptions.push({value: technology.techId, label: technology.techName})
-            })
+        if(selectAll){
+            if (getTechnology.length) {
+                getTechnology.map(technology => {
+                    return techOptions.push({value: technology.techId, label: technology.techName,disabled:'true'})
+                })
+            }
+        }
+        else {
+            if (getTechnology.length) {
+                getTechnology.map(technology => {
+                    return techOptions.push({value: technology.techId, label: technology.techName})
+                })
+            }
         }
-        techOptions.push({value: this.props.getTechnology.length + 1, label: 'All'});
 
-        if (this.props.getTest && this.props.getTest.length !== 0) {
-            this.props.getTest.map((test, key) => {
+        techOptions.push({value: getTechnology.length + 1, label: 'All'});
+
+        if (getTest.length) {
+            getTest.map((test, key) => {
                 noMoreData = key + 1;
                 return testData.push(test);
             })
@@ -642,8 +655,8 @@
                                                     <ButtonGroup> {(this.state.offset !== 0) ?
                                                         <Button color="primary"
                                                                 onClick={this.btnNextPrevClick.bind(this)}
-                                                                name="Prev"> Prev </Button> : null} & nbsp; & nbsp; &
-                                                        nbsp; {noMoreData >= this.state.recordPerPage ?
+                                                                name="Prev"> Prev </Button> : null}{' '}
+                                                      {noMoreData >= this.state.recordPerPage ?
                                                             <Button color="primary"
                                                                     onClick={this.btnNextPrevClick.bind(this)}
                                                                     name="Next"> Next </Button> : null
@@ -662,7 +675,9 @@
                                                                     value={selectedOption}
                                                                     onChange={this.SelectHandleChange.bind(this)}
                                                                     options={techOptions}
-                                                                    isMulti={true}/>
+                                                                    isMulti={true}
+                                                                    isOptionDisabled={(option)=>option.disabled === 'true'}
+                                                                     />
                                                             <span
                                                                 style={{color: "red"}}> {this.state.errors.selectedOption} </span>
                                                         </FormGroup>
@@ -722,7 +737,7 @@
                                                     </Form>
                                                 </Card>
                                             </Col>
-                                            <Col sm="6" id="allTech" hidden>
+                                            {showRatioForTech && <Col sm="6" id="allTech">
                                                 <Card body>
                                                     <h3> Ratio for Technology </h3>
                                                     <Form>
@@ -735,7 +750,7 @@
                                                             Ratio </Button>
                                                     </Form>
                                                 </Card>
-                                            </Col>
+                                            </Col>}
                                         </Row>
                                     </TabPane>
                                 </TabContent>
Index: src/Admin/TestQuestion/TestQuestion.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Admin/TestQuestion/TestQuestion.js	(date 1558075849000)
+++ src/Admin/TestQuestion/TestQuestion.js	(date 1558511878000)
@@ -5,17 +5,25 @@
 import { Card, CardHeader, CardBody, Container, Row, Form, FormGroup, Label, Input, Button, Table } from "reactstrap";
 import { notification } from 'antd';
 import Select from 'react-select';
+import { findIndex } from 'lodash';
+
 
 import Header from "components/Headers/Header.jsx";
 import * as testQuestionAction from '../../Action/testQuestionAction';
 import * as testAction from '../../Action/testAction';
 import * as questionAction from '../../Action/queAction';
 
+let quesId = [];
+
 class TestQuestion extends React.Component {
     constructor(props) {
         super(props);
         this.state = {
             selectedOption: null,
+            questionHidden: false,
+            shuffleButtonHidden: false,
+            applyChangesHidden: false,
+            // quesId: []
         };
     }
 
@@ -25,11 +33,8 @@
     }
 
     SelectHandleChange = (selectedOption) => {
-        this.setState({ selectedOption });
+        this.setState({ selectedOption,questionHidden:true,applyChangesHidden:false,shuffleButtonHidden:true });
         this.props.action.TestQuestionAction.getTestQuestion(selectedOption.value);
-        document.getElementById('question').hidden = false;
-        document.getElementById('shuffleButton').hidden = false;
-
     }
 
     openNotificationWithIcon = (type, msg) => {
@@ -39,41 +44,107 @@
     };
 
     btnShuffle(testQuesId, e) {
+        quesId = [];
         this.openNotificationWithIcon('success', "Question Updated");
         this.props.action.TestQuestionAction.shuffleQuestion(this.state.selectedOption.value, testQuesId);
     }
 
-    chkCompulsory(e) {
+    findIndex(ques){
+        var find = findIndex(quesId, (x, value) => {
+            return +x.quesId === ques.quesId
+        });
+        return find;
+    }
+    addChangesState(){
+        this.setState({ applyChangesHidden:true});
+    }
 
+    chkCompulsoryHandler(ques,e) {
+        var find = this.findIndex(ques);
+        if (find !== -1 || find === 0) {
+            quesId[find]["Coumpulsory"] = e.target.checked;
+        } else {
+            quesId.push({
+                quesId:ques.quesId,
+                Coumpulsory: e.target.checked
+            })
+            }
+        this.addChangesState();
     }
 
-    render() {
+    marksChangeHandler(ques,e){
+        var find = this.findIndex(ques);
+        if (find !== -1 || find === 0) {
+            quesId[find]["marks"] = parseInt(e.target.value);
+        } else {
+            quesId.push({
+                quesId:ques.quesId,
+                marks: parseInt(e.target.value)
+            })
+        }
+        this.addChangesState();
+    }
+
+    negativeMarksChangeHandler(ques,e){
+        var find = this.findIndex(ques);
+        if (find !== -1 || find === 0) {
+            quesId[find]["negativeMarks"] = parseInt(e.target.value);
+        } else {
+            quesId.push({
+                quesId:ques.quesId,
+                negativeMarks: parseInt(e.target.value)
+            })
+        }
+        this.addChangesState();
+    }
+
+    btnApplyChanges(testQuesId,quesList,e){
         const { selectedOption } = this.state;
+        quesList.forEach(quelist => {
+            quesId.forEach(queId => {
+                if(quelist.quesId === queId.quesId){
+                    Object.keys(queId).forEach(key => {
+                        if(key === "marks")
+                            quelist[key]=queId[key]
+                        if(key === "Coumpulsory")
+                            quelist[key]=queId[key]
+                        if(key === "negativeMarks")
+                            quelist[key]=queId[key]
+                    })
+                }
+            })
+        })
+        let question = {quesId:JSON.stringify(quesList)};
+        this.props.action.TestQuestionAction.updateQuestion(selectedOption.value,testQuesId,question);
+    }
+
+    render() {
+        const { selectedOption ,questionHidden,shuffleButtonHidden,applyChangesHidden} = this.state;
         let testOptions = [];
         let testQuestion = [];
         let testQuesId;
+        let quesList=[];
 
         if (this.props.get_all && this.props.get_all.length !== 0) {
             this.props.get_all.map(test => {
-
                 return testOptions.push({ value: test.testId, label: test.testName })
             })
         }
 
         if (this.props.test_question && this.props.test_question.length !== 0) {
-
             if (this.props.test_question.quesId && this.props.test_question.quesId.length !== 0) {
                 testQuesId = this.props.test_question.testQuesId;
                 this.props.test_question.quesId.map((ques, key) => {
                     if (this.props.get_all_question && this.props.get_all_question.length !== 0) {
                         this.props.get_all_question.filter(allques => {
                             if (allques.quesId === ques.quesId) {
+                                quesList.push(ques);
                                 return testQuestion.push(<tr key={key}>
                                     <td>{key + 1}</td>
                                     <td><Input type="textarea" disabled value={allques.question.text} /></td>
-                                    <td><Input style={{ marginLeft: "28px" }} onChange={this.chkCompulsory.bind(this, ques.quesId)} type="checkbox" value={ques.Coumpulsory} /></td>
-                                    <td><Input type="number" defaultValue={ques.marks} /></td>
-                                    <td><Input type="number" defaultValue={ques.negativeMarks} /></td>
+                                    <td><Input style={{ marginLeft: "28px" }} onChange={this.chkCompulsoryHandler.bind(this,ques)} type="checkbox" defaultChecked={ques.Coumpulsory} /></td>
+                                    <td><Input type="number" onChange={this.marksChangeHandler.bind(this,ques)} defaultValue={ques.marks} /></td>
+                                    <td><Input type="number" onChange={this.negativeMarksChangeHandler.bind(this,ques)} defaultValue={ques.negativeMarks} /></td>
                                 </tr>)
                             }
                             return null;
@@ -101,10 +172,9 @@
                                                 placeholder="Select Test"
                                                 value={selectedOption}
                                                 onChange={this.SelectHandleChange}
-                                                options={testOptions}
-                                            />
+                                                options={testOptions} />
                                         </FormGroup>
-                                        <FormGroup id="question" hidden>
+                                        {questionHidden && <FormGroup id="question">
                                             <FormGroup>
                                                 <Label for="exampleText">Questions</Label>
                                                 <div>
@@ -125,8 +195,10 @@
                                                     <Input id="fillup" hidden type="text" placeholder="Answer" />
                                                 </div>
                                             </FormGroup>
-                                        </FormGroup>
-                                        <Button color="warning" id="shuffleButton" outline style={{ float: "right" }} hidden onClick={this.btnShuffle.bind(this, testQuesId)}>Shuffle</Button>
+                                        </FormGroup>}
+                                        {applyChangesHidden && <Button color="warning" outline onClick={this.btnApplyChanges.bind(this, testQuesId,quesList)}> Apply Changes </Button>}
+                                        {/*testQuesId*/}
+                                        {shuffleButtonHidden && <Button color="warning" id="shuffleButton" outline style={{ float: "right" }} onClick={this.btnShuffle.bind(this, testQuesId)}>Shuffle</Button>}
                                     </Form>
                                 </CardBody>
                             </Card>
Index: src/Admin/User/User.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Admin/User/User.js	(date 1558075849000)
+++ src/Admin/User/User.js	(date 1558511878000)
@@ -10,6 +10,7 @@
 import * as userAction from '../../Action/userAction';
 import PDFGenerator from './pdfGenerator';
 const Search = antInput.Search;
+
 class User extends React.Component {
     constructor(props) {
         super(props);
@@ -68,6 +69,13 @@
         this.props.action.UserAction.deleteUser(userId, this.state.offset, this.state.recordPerPage, this.state.fieldName, this.state.sortDirection)
     }
 
+    btnSearch = (searchText,e) => {
+        if(searchText)
+            this.props.action.UserAction.search({"searchTerm":searchText});
+        else
+            this.props.action.UserAction.getUser(this.state.offset, this.state.recordPerPage, this.state.fieldName, this.state.sortDirection);
+    }
+
     render() {
         let users = [];
         let noMoreData = 0;
@@ -111,7 +119,7 @@
                                     </Input>
                                 </Container>
                                 <br />
-                                <Search placeholder="input search text"  style={{ width: "30%", marginLeft: "24px" }} onSearch={value => console.log(value)} enterButton />
+                                <Search placeholder="input search text"  style={{ width: "30%", marginLeft: "24px" }} onSearch={searchTerm => this.btnSearch(searchTerm)} enterButton />
                                 
                                 {/* <Input style={{ width: "30%", marginLeft: "24px" }} type="text" placeholder="Search" /> */}
                                 <PDFGenerator data={this.props.get_limited_user} />
@@ -124,7 +132,6 @@
                                             filter={{ type: 'TextFilter' }} filterFormatted dataFormat={collegeFunction}>College</TableHeaderColumn>
                                         <TableHeaderColumn dataField="createdDate" width="150" dataFormat={dateFormatter}
                                             dataSort={true}>Registered Date</TableHeaderColumn>
-                                        {/* filter={{ type: 'DateFilter' }} */}
                                         <TableHeaderColumn dataField="contactNo" width='180'>Contact</TableHeaderColumn>
                                         <TableHeaderColumn dataField="userId" formatExtraData={this}
                                             dataFormat={this.ActionbuttonDisplay} width="100" >Action</TableHeaderColumn>
Index: src/Reducer/techReducer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Reducer/techReducer.js	(date 1558075849000)
+++ src/Reducer/techReducer.js	(date 1558511878000)
@@ -1,6 +1,8 @@
 const INITIAL_STATE = {
     technology: [],
     subtechnology:[],
+    edittechnology:'',
+    deletedtechnology:'',
     error:''
 }
 
@@ -8,6 +10,9 @@
 export const INVALID_DATA = 'INVALID_DATA';
 export const GET_SUBTECHNOLOGY="GET_SUBTECHNOLOGY";
 export const ADD_TECHNOLOGY="ADD_TECHNOLOGY";
+export const EDIT_TECHNOLOGY="EDIT_TECHNOLOGY"
+export const DELETE_TECHNOLOGY="DELETE_TECHNOLOGY"
+export const DELETE_SUBTECHNOLOGY="DELETE_SUBTECHNOLOGY"
 
 export default (state = INITIAL_STATE, action) => {
     switch (action.type) {
@@ -18,15 +23,59 @@
             return Object.assign({}, state, { subtechnology: action.data });
         }
         case ADD_TECHNOLOGY:{
+            // debugger
             let tech=state.technology
+            // let subtech=state.subtechnology
             let d=action.data
             tech.push(d)
+            // subtech.push(d.subTechnologies)
             return Object.assign({}, state, { technology:[...tech]  });
         }
+        case EDIT_TECHNOLOGY:{
+            console.log("after edit response",action.data)
+            const res=action.data
+            const techid =res.technology.techId
+            let tech=state.technology
+            let index
+            tech.map((t)=>{
+                if(t.techId===techid){
+                     index=tech.indexOf(t)
+                }
+                return null;
+            })
+            tech[index]={
+                techId: res.technology.techId,
+                techName:res.technology.techName,
+                level: res.technology.level,
+                isActive: res.technology.isActive,
+                SubTechnologies:[...res.SubTechnologies]
+            }
+            // subtech.push(d.subTechnologies)
+            return Object.assign({}, state, { technology:[...tech]  });
+        }
+        case DELETE_TECHNOLOGY:{
+            debugger;
+            const id=action.data.techId
+            let index=-1;
+            let t=state.technology
+            for(let i=0;i<t.length;i++){
+                if(t.techId===id){
+                    index=i;
+                    break;
+                }
+            }
+            t.splice(index,1);
+            console.log("action.data",action.data);
+            return Object.assign({}, state, { technology:[...t] });
+        }
+        case DELETE_SUBTECHNOLOGY:{
+            console.log("deleted sub tech",action.data)
+            return state
+        }
         case INVALID_DATA: {
             return Object.assign({}, state, { error: action.error });
         }
         default:
             return state;
     }
-}
\ No newline at end of file
+}
Index: src/Reducer/testQuestionReducer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Reducer/testQuestionReducer.js	(date 1558075849000)
+++ src/Reducer/testQuestionReducer.js	(date 1558511878000)
@@ -5,6 +5,8 @@
 
 export const GET_TEST_QUESTION = "GET_TEST_QUESTION";
 export const GET_TEST_QUESTION_FAILED = "GET_TEST_QUESTION_FAILED";
+export const UPDATE_QUESTION = "UPDATE_QUESTION";
+export const UPDATE_QUESTION_FAILED = "UPDATE_QUESTION_FAILED";
 
 export default (state = INITIAL_STATE, action) => {
     switch (action.type) {
@@ -13,6 +15,12 @@
         }
         case GET_TEST_QUESTION_FAILED: {
             return Object.assign({}, state, { test_question_error: action.test_question_error, test_question: [] });
+        }
+        case UPDATE_QUESTION: {
+            return Object.assign({}, state, { test_question: action.test_question, test_question_error: "" });
+        }
+        case UPDATE_QUESTION_FAILED: {
+            return Object.assign({}, state, { test_question_error: action.test_question_error, test_question: [] });
         }
         default:
             return state;
Index: src/Reducer/userReducer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Reducer/userReducer.js	(date 1558075849000)
+++ src/Reducer/userReducer.js	(date 1558511878000)
@@ -1,12 +1,16 @@
 const INITIAL_STATE = {
     get_limited_user: [],
-    get_user_error: ""
+    get_user_error: "",
+    search_response:[],
+    search_error:""
 }
 
 export const GET_USER = 'GET_USER';
 export const GET_USER_FAILED = 'GET_USER_FAILED';
 export const DELETE_USER = 'DELETE_USER';
 export const DELETE_USER_FAILED = 'DELETE_USER_FAILED';
+export const SEARCH = 'SEARCH';
+export const SEARCH_FAILED = 'SEARCH_FAILED';
 
 export default (state = INITIAL_STATE, action) => {
     switch (action.type) {
@@ -22,6 +26,12 @@
         case DELETE_USER_FAILED: {
             return Object.assign({}, state, { get_user_error: action.deleteUserError, get_limited_user: [] });
         }
+        case SEARCH: {
+            return Object.assign({}, state, { get_limited_user: action.searchResponse, get_user_error: "" });
+        }
+        case SEARCH_FAILED: {
+            return Object.assign({}, state, { get_user_error: action.searchError, get_limited_user: [] });
+        }
         default:
             return state;
     }
Index: src/Services/techService.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Services/techService.js	(date 1558075849000)
+++ src/Services/techService.js	(date 1558511878000)
@@ -1,13 +1,26 @@
 import BaseService from './baseService';
 
+
 export function GetTechnology() {
     return BaseService.get('api/technology');
 }
 
 export function GetSubtechnology(techId) {
-    return BaseService.get('api/subtechnology/tech/'+techId);
+    return BaseService.get('api/subTechnology/tech/'+techId);
 }
 
 export function AddTechnology(data) {
     return BaseService.post('api/technology',data);
-}
\ No newline at end of file
+}
+
+export function EditTechnology(id,data) {
+    return BaseService.put(`api/technology/${id}`,data);
+}
+
+export function DeleteTechnology(id) {
+    return BaseService.delete(`api/technology/delete/${id}`);
+}
+
+export function DeleteSubtechnology(id) {
+    return BaseService.delete(`api/subTechnology/delete/${id}`);
+}
Index: src/Services/testQuestionService.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Services/testQuestionService.js	(date 1558075849000)
+++ src/Services/testQuestionService.js	(date 1558511878000)
@@ -6,4 +6,8 @@
 
 export function shuffleQuestion(testId, testQuestionId) {
     return BaseService.put('api/testQuestion/' + testId + '/' + testQuestionId);
+}
+
+export function updateQuestion(testId,testQuesId,quesId) {
+    return BaseService.put('api/testQuestion/questionUpdate/' + testId + '/' + testQuesId, quesId);
 }
\ No newline at end of file
Index: src/Services/userService.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Services/userService.js	(date 1558075849000)
+++ src/Services/userService.js	(date 1558511878000)
@@ -10,4 +10,8 @@
 
 export function deleteUser(userId) {
     return BaseService.delete('api/user/delete/' + userId);
+}
+
+export function search(searchText) {
+    return BaseService.post('api/user/search/Term',searchText);
 }
\ No newline at end of file
Index: src/components/Footers/AdminFooter.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/Footers/AdminFooter.jsx	(date 1558075849000)
+++ src/components/Footers/AdminFooter.jsx	(date 1558511878000)
@@ -2,14 +2,13 @@
 import React from "react";
 
 // reactstrap components
-import { Container, Row, Col, Nav, NavItem, NavLink } from "reactstrap";
+import { Row, Col } from "reactstrap";
 
 class Footer extends React.Component {
   render() {
     return (
       <footer className="footer">
         <Row className="align-items-center justify-content-xl-between">
-          {/* <Col xl="6"> */}
           <Col>
             <div className="copyright text-center text-xl-left text-muted">
             © Copyright - 
@@ -23,50 +22,6 @@
               </a>
             </div>
           </Col>
-
-          {/* <Col xl="6">
-            <Nav className="nav-footer justify-content-center justify-content-xl-end">
-              <NavItem>
-                <NavLink
-                  href="https://www.creative-tim.com?ref=adr-admin-footer"
-                  rel="noopener noreferrer"
-                  target="_blank"
-                >
-                  Creative Tim
-                </NavLink>
-              </NavItem>
-
-              <NavItem>
-                <NavLink
-                  href="https://www.creative-tim.com/presentation?ref=adr-admin-footer"
-                  rel="noopener noreferrer"
-                  target="_blank"
-                >
-                  About Us
-                </NavLink>
-              </NavItem>
-
-              <NavItem>
-                <NavLink
-                  href="http://blog.creative-tim.com?ref=adr-admin-footer"
-                  rel="noopener noreferrer"
-                  target="_blank"
-                >
-                  Blog
-                </NavLink>
-              </NavItem>
-
-              <NavItem>
-                <NavLink
-                  href="https://github.com/creativetimofficial/argon-dashboard/blob/master/LICENSE.md?ref=adr-admin-footer"
-                  rel="noopener noreferrer"
-                  target="_blank"
-                >
-                  MIT License
-                </NavLink>
-              </NavItem>
-            </Nav>
-          </Col> */}
         </Row>
       </footer>
     );
Index: src/components/Footers/UserFooter.js
===================================================================
--- src/components/Footers/UserFooter.js	(date 1558511878000)
+++ src/components/Footers/UserFooter.js	(date 1558511878000)
@@ -0,0 +1,31 @@
+/*eslint-disable*/
+import React from "react";
+
+// reactstrap components
+import { Row, Col } from "reactstrap";
+
+class UserFooter extends React.Component {
+    render() {
+        return (
+            <footer className="footer">
+                <Row className="align-items-center justify-content-xl-between">
+                    <Col>
+                        <div className="copyright text-center text-xl-left text-muted">
+                            © Copyright -
+                            <a
+                                className="font-weight-bold ml-1"
+                                href="http://lanetteam.com/"
+                                rel="noopener noreferrer"
+                                target="_blank"
+                            >
+                                Lanetteam (P) LTD. All rights reserved
+                            </a>
+                        </div>
+                    </Col>
+                </Row>
+            </footer>
+        );
+    }
+}
+
+export default UserFooter;
\ No newline at end of file
Index: src/components/Navbars/AdminNavbar.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/Navbars/AdminNavbar.jsx	(date 1558075849000)
+++ src/components/Navbars/AdminNavbar.jsx	(date 1558511878000)
@@ -51,26 +51,23 @@
                   </Media>
                 </DropdownToggle>
                 <DropdownMenu className="dropdown-menu-arrow" right>
-                  <DropdownItem className="noti-title" header tag="div">
-                    <h6 className="text-overflow m-0">Welcome!</h6>
-                  </DropdownItem>
-                  <DropdownItem to="/admin/user-profile" tag={Link}>
-                    <i className="ni ni-single-02" />
-                    <span>My profile</span>
-                  </DropdownItem>
-                  <DropdownItem to="/admin/user-profile" tag={Link}>
-                    <i className="ni ni-settings-gear-65" />
-                    <span>Settings</span>
-                  </DropdownItem>
-                  <DropdownItem to="/admin/user-profile" tag={Link}>
-                    <i className="ni ni-calendar-grid-58" />
-                    <span>Activity</span>
-                  </DropdownItem>
-                  <DropdownItem to="/admin/user-profile" tag={Link}>
-                    <i className="ni ni-support-16" />
-                    <span>Support</span>
-                  </DropdownItem>
-                  <DropdownItem divider />
+                  {/*<DropdownItem to="/admin/user-profile" tag={Link}>*/}
+                    {/*<i className="ni ni-single-02" />*/}
+                    {/*<span>My profile</span>*/}
+                  {/*</DropdownItem>*/}
+                  {/*<DropdownItem to="/admin/user-profile" tag={Link}>*/}
+                    {/*<i className="ni ni-settings-gear-65" />*/}
+                    {/*<span>Settings</span>*/}
+                  {/*</DropdownItem>*/}
+                  {/*<DropdownItem to="/admin/user-profile" tag={Link}>*/}
+                    {/*<i className="ni ni-calendar-grid-58" />*/}
+                    {/*<span>Activity</span>*/}
+                  {/*</DropdownItem>*/}
+                  {/*<DropdownItem to="/admin/user-profile" tag={Link}>*/}
+                    {/*<i className="ni ni-support-16" />*/}
+                    {/*<span>Support</span>*/}
+                  {/*</DropdownItem>*/}
+                  {/*<DropdownItem divider />*/}
                   <DropdownItem href="#pablo" onClick={this.btnLogout.bind(this)}>
                     <i className="ni ni-user-run" />
                     <span>Logout</span>
Index: src/routes.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/routes.js	(date 1558075849000)
+++ src/routes.js	(date 1558511878000)
@@ -1,11 +1,6 @@
 import Index from "views/Index.jsx";
-// import Profile from "views/examples/Profile.jsx";
-// import Maps from "views/examples/Maps.jsx";
 import Register from "views/examples/Register.jsx";
 import Login from "views/examples/Login.jsx";
-// import Tables from "views/examples/Tables.jsx";
-// import Icons from "views/examples/Icons.jsx";
-
 import User from './Admin/User/User';
 import Technology from "./Admin/TechnologyQuestion/Technology";
 import Test from './Admin/Test/Test';
